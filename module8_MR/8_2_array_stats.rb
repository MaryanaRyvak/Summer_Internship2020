# Даний модуль діє, як простір імен.
# Суттю цього завдання є написання модулю, який має функції
# для статистичного аналізу рядків.
#
# Він має містити такі функції
# 1. length - функція, яка обраховує довжину вхідного рядка
#     та виводить результат у спеціальному форматі
# 2. most_frequent - функція, яка знаходить символ, який найчастіше зустрічається
#     у рядку та виводить у спеціальному форматі його та кількість його зустрічей.
# 3. char_stats - фукнція, яка повертає масив у вигляді символ-'кількість зустрічей'.
#     масив відсортований за спаданням кількості зустрічей символів у рядку аргументі.

# Ви маєте дописати код для правильної роботи методів ( length, most_frequent, char_stats ) нищевказаного модулю.

module Stats
end

# тут слід додати через інтерполяцію довжину вхідного рядку
def Stats.length str
  "Довжина рядка складає #{ str.length } символів."
end

# тут слід використати функцію chars_stats, і у відповідні місця вставити ключ та значення
# символу, який найбільше зустрічаєтсья
def Stats.most_frequent str
  res = Stats.char_stats str
      "У заданому рядку найчастіше зустрічаються символ '#{res[0][0]}', а саме #{ res[0][1]} разів."
end

# дана функція обраховує кількість зустрічей символів у рядку.
# в результаті ми маємо отримати масив
def Stats.char_stats str
  # створюємо хеш, в який будемо записувати пари 'символ' => 'кількість його зустрічей'
  elements = Hash.new
  # використовуємо ітератор, який передає блоку символ
  str.each_char { |e|
    # тут ми маємо перевірити, чи символ вже є у хеші
    # це ми можемо зробити за допомогою методу include?
    # він повертає чи є його аргумент ключем у хеші.
    if elements.include?( e )
        # якщо так, то нам необхідно збільшити на 1 значення-пару до відповідного ключа
      elements[e] += 1
    else
      # у іншому випадку ми маємо записати за цим ключем значення 1
      elements[e] = 1
    end
  }

  # тут ми маємо перетворити хешу масив за допомогою методу to_a
  elements = elements.to_a
  # останнім кроком є сортування отриманого двовимірного масиву ( кожен елемент масиву є масивом )
  # за допомогою методу sort(). В цей метод можна передати блок, який визначає логіку порівняння.
  # Наприклад [1,2,3,4,5].sort {|a,b| b <=> a} поверне масив [5,4,3,2,1].
  elements = elements.sort{|a,b| b[1] <=> a[1]}
end
